;;
;; This file contains utils to parse database generated by
;; https://github.com/m039/clj-parse-android
;;

(require 'x-android-db)
(require 'x-android-mode-line)

;;
;; Common stuff
;; 

(defvar *x-android-db/parsed-jars-db-name* "parsed-jars.db")

(defun x-android-db-parser/select-database ( database-path )
  (x-android-db/start-sqlite-process)
  (x-android-db/send-command (x-android-db/command/select-database database-path)))

(defun x-android-db-parser/enitity-query ( where )
  (format "SELECT name,simple_name,methods,enclosing_class__name FROM class WHERE %s" where))

(defun x-android-db-parser/query/interfaces ()
  (let ((query (x-android-db-parser/enitity-query (format "is_interface = 1"))))
    (x-android-db/send-command (x-android-db/command/query query))))

(defun x-android-db-parser/get/name ( entity )
  (nth 0 entity))

(defun x-android-db-parser/get/simple_name ( entity )
  (nth 1 entity))

(defun x-android-db-parser/get/methods ( entity )
  (nth 2 entity))

(defun x-android-db-parser/get/enclosing_class ( entity &optional return-entity )
  (let ((name (nth 3 entity)))
    (if (null return-entity)
        name
      (let ((query (x-android-db-parser/enitity-query (format "name = '%s'" name))))
        (car (x-android-db/send-command (x-android-db/command/query query)))))))


(defun x-android-db-parser/extract/simple_name ( result )
  (remove-duplicates  (mapcar (lambda (l) (nth 1 l)) result) :test 'string= ))

(defun x-android-db-parser/extract/name ( result )
  (remove-duplicates (mapcar (lambda (l) (nth 0 l)) result) :test 'string= ))


(defun x-android-db-parser/filter ( predicate coll )
  (delq nil (mapcar predicate coll)))


(defun x-android-db-parser/filter/simple_name ( simple-name coll )
  "Filter collection (or result from query) by simple_name column."
  (x-android-db-parser/filter (lambda (l)
                                (let ((sn (x-android-db-parser/get/simple_name l)))
                                  (when (string= sn simple-name)
                                    l))) coll))


(defun x-android-db-parser/filter/name ( name coll )
  "Filter collection (or result from query) by name column."
  (x-android-db-parser/filter (lambda (l)
                                (let ((n (x-android-db-parser/get/name l)))
                                  (when (string= n name)
                                    l))) coll))


(defun x-android-read-interface ()
  (interactive)
  (let* ((interfaces (x-android-db-parser/query/interfaces))
         (simple-names (x-android-db-parser/extract/simple_name interfaces))
         (selected-interfaces (x-android-db-parser/filter/simple_name
                               (completing-read "Select the interface: " simple-names)
                               interfaces)))

    (message (format "%s" selected-interfaces))
    
    (when (> (length selected-interfaces) 1)
      (let ((names (x-android-db-parser/extract/name selected-interfaces)))     
        (setq selected-interfaces (x-android-db-parser/filter/name
                                   (if (> (length names) 1)
                                       (completing-read "Correct the selection: " names)
                                     (car names))
                                   interfaces))))

    (car selected-interfaces)))

(defun x-android-db-parser/read-interface ( &optional for-yas )
  (interactive)
  (let ((global-arg-count 1))
    (flet ((find-return-type ( method )
                             (with-temp-buffer
                               (insert method)

                               (goto-char (point-min))
                               (search-forward "public" nil t)

                               (forward-word)

                               (let ((end (point)))
                                 (backward-word)
                                 (buffer-substring (point) end))))

           (insert-args-in-method (method)
                                  (let ((arg-count 0)
                                        start
                                        end)
                                    (with-temp-buffer
                                      (insert method)
                                      (goto-char (point-min))

                                      (search-forward "(" nil t)
                                      (setq start (point))

                                      (search-forward ")" nil t)
                                      (setq end (point))

                                      (if (<= (- end start) 1)
                                          ;; no arguments
                                          (buffer-string)
                                        ;; there is some arguments
                                        (goto-char start)
                                        
                                        (forward-word)
                                        (insert (if for-yas
                                                    (format " ${%d:arg%d}" global-arg-count arg-count)
                                                  (format " arg%d" arg-count)))
                                        (setq arg-count (+ arg-count 1))
                                        (setq global-arg-count (+ global-arg-count 1))

                                        (while (search-forward "," nil t)
                                          (forward-word)
                                          (insert (if for-yas
                                                    (format " ${%d:arg%d}" global-arg-count arg-count)
                                                  (format " arg%d" arg-count)))
                                          (setq arg-count (+ arg-count 1)))
                                        (setq global-arg-count (+ global-arg-count 1))
                                        
                                        (buffer-string)))))
           )

      (let ((interface (x-android-read-interface)))
        (unless (null interface)
          (let ((simple-name (x-android-db-parser/get/simple_name interface))
                (name (x-android-db-parser/get/name interface))
                (methods (x-android-db-parser/get/methods interface))
                (enclosing-class (x-android-db-parser/get/enclosing_class interface t))
                (start (point)))

            (if (null enclosing-class)
                (setq enclosing-class "")
              (setq enclosing-class (format "%s." (x-android-db-parser/get/simple_name enclosing-class))))
            
            (format (if for-yas
                        "new %s%s() {\n%s};$0"
                      "new %s%s() {\n%s};")
                    
                    enclosing-class
                    simple-name
                    (with-temp-buffer
                      (dolist (m (split-string methods "\n"))
                        (let ((return-type (find-return-type m)))
                          (insert (format (cond ((let ((first-letter (aref return-type 0)))
                                                   (when (= first-letter (upcase first-letter))
                                                     t))
                                                 "@Override\n%s {\nreturn null;\n}\n")

                                                ((string= return-type "boolean")
                                                 "@Override\n%s {\nreturn false;\n}\n")

                                                ((string= return-type "int")
                                                 "@Override\n%s {\nreturn 0;\n}\n")

                                                ((string= return-type "float")
                                                 "@Override\n%s {\nreturn 0.0f;\n}\n")

                                                (t
                                                 "@Override\n%s {\n}\n"))
                                          (insert-args-in-method m)))))
                      (buffer-string)))
            ))))))

;;
;; Project stuff
;; 

(defun x-android-db-parser/find-database ( project )
  (concat (x-android-cache/find-cache-directory project)
          *x-android-db/parsed-jars-db-name*))
;;
;; Interface generator
;; 

(defun x-android-new-interface ( &optional use-yas )
  (interactive)
  (let ((database (x-android-db-parser/find-database (ede-current-project)))
        (start (point)))

    (if (not (file-exists-p database))
        (message "There is no database to find interface.")

      (x-android-db-parser/select-database database)
      (insert (x-android-db-parser/read-interface use-yas))
      (indent-region start (point)))))

(defun x-android-new-interface-yas ()
  (interactive)
  (let ((database (x-android-db-parser/find-database (ede-current-project)))
        (start (point)))

    (if (not (file-exists-p database))
        (message "There is no database to find interface.")
      (x-android-db-parser/select-database database)
      
      (yas/expand-snippet (x-android-db-parser/read-interface t))
      (indent-region start (point)))))

;;
;; Parser
;;

(defvar *x-android-db-parser/parse-jars-buffer* "*x-android-db-parser/parse-jars*")

(defconst *x-android-db-parser/mode-line* "j [%d/%d]")
(defconst *x-android-db-parser/parsed-patter* "Parses")

(defun x-android-db-parser/update-mode-line (i max)
  (x-android-mode-line/inject-and-update
   (format *x-android-db-parser/mode-line* i max)))

(defun x-android-db-parser/parse-jars ()
  "Start parsing all jars in the current project to the database."
  (interactive)
  (let* ((project (ede-current-project))
         (root (ede-project-root-directory project))
         (cache-dir (x-android-cache/find-cache-directory project))
         (database (concat cache-dir *x-android-db/parsed-jars-db-name*))
         (parser-program (concat (x-android/lib-directory) "clj-parse-android.jar"))
         jars)

    (setq jars (let (res)
                 (dolist (jar (x-android/find-jars root) res)
                   (if (null res)
                       (setq res jar)
                     (setq res (concat res ":" jar))))))

    ;;
    ;; Start parser asynchronous
    ;;
    (let ((buffer (get-buffer-create *x-android-db-parser/parse-jars-buffer*))
          process)

      (if (get-buffer-process buffer)
          (message "The process is already exist! Try to wait or to kill it manualy.")

        (with-current-buffer buffer
          (erase-buffer)

          (make-local-variable 'count)
          (make-local-variable 'index)
          
          (setq count (length (x-android/find-jars root)))
          (setq index 0)
          
          (x-android-db-parser/update-mode-line index count))
        
        (x-android-mode-line/inject)
        
        (setq process (start-process-shell-command
                       "x-android-db-parser/parse-jar" 
                       buffer
                       "java"
                       (format "-jar %s " parser-program)
                       (format "-o %s " database)
                       (format "-j %s " jars)))

        ;;
        ;; On each occurence increment the mode-line numbers
        ;;
        (set-process-filter process (lambda (process output)
                                      (let ((buffer (get-buffer *x-android-db-parser/parse-jars-buffer*)))
                                        (when buffer
                                          (with-current-buffer buffer
                                            (when (string-match *x-android-db-parser/parsed-patter* output)
                                              (x-android-db-parser/update-mode-line index count)
                                              (setq index (+ index 1))))))))

        ;;
        ;; Hide mode-line string at process finish
        ;;
        (set-process-sentinel process (lambda (process message)
                                        (message message)
                                        (when (or (string= message "finished\n")
                                                  (string= message "killed\n"))
                                          (x-android-mode-line/inject t))))
      
      ))))

(defun x-android-db-parser/stop-parsing-jars ()
  "Stop parsing all jars in the current project."
  (interactive)
  (delete-process *x-android-db-parser/parse-jars-buffer*))


(defun x-android-start-parsing-database-in-tmp ()
  "Raw/manual usage function. To generate database a little faster."
  (interactive)
  (let ((x-android-cache-directory (file-name-as-directory "/tmp/")))
    (x-android-db-parser/parse-jars)))

(defun x-android-move-database-from-tmp-to-cache ()
  "Raw/manual usage function (use it after x-android-start-parsing-database-in-tmp)"
  (interactive)
  (let ((project (ede-current-project)))
    (rename-file (let ((x-android-cache-directory (file-name-as-directory "/tmp/")))
                   (x-android-db-parser/find-database project))
                 (x-android-db-parser/find-database project)
                 t)))

(defalias 'x-android-start-parsing-database
  'x-android-db-parser/parse-jars)

(defalias 'x-android-stop-parsing-database
  'x-android-db-parser/stop-parsing-jars)


(provide 'x-android-db-parser)

